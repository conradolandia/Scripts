#!/usr/bin/env ruby

require 'epitools'
require 'erb'
require 'uri'

DEFAULT_PDF_HOST='http://0.0.0.0:9555/viewer/web/viewer.html?file=%2F'
NOTIFY_ICON='/usr/share/icons/Faenza/apps/scalable/xfce4-clock.svg'

def create_review(pdf_url, review_file)
  review = %(* Summary

* Strength

* Weakness

* Notes

** Questions

** Open Problems

** Results

** New Techniques

** Connections

[[#{pdf_url}][Paper]]
)

  unless review_file.exists?
    File.write(review_file, review)
  end
  system('xdg-open', pdf_url)
  pid = Process.spawn('emacs-gui', review_file)
  Process.detach pid
  (1..20).each do |mins|
    print "\r#{mins} minutes"
    sleep(60.seconds)
  end
  notify
end

def notify
  message = 'Time Over Start next one'
  system("notify-send #{message} --icon=#{NOTIFY_ICON} -t 12000")
  system("mpv --really-quiet --volume=100 ~/.wakeup")
end

def make_url(name, hostname = DEFAULT_PDF_HOST)
  url = hostname + ERB::Util.url_encode(name)
  url
end

def help!
  puts
  puts 'Usage:'
  puts '  review <pdf> [review filename] => open a pdf and a emacs review page'
  puts
  exit 1
end

if __FILE__ == $PROGRAM_NAME
  args = ARGV
  help! if args.empty?
  # Actual logic, ugly
  pdf_loc = args.shift
  review_file = Path[args.shift]
  review_loc = Path['~/src/www/wiki/wikidata/Papers']
  if pdf_loc =~ URI::regexp
    pdf_url = pdf_loc
    if review_file.nil?
      puts 'Please enter the review filename'
      puts "It will be put in #{review_loc}"
      print '> '
      name = $stdin.gets.chomp
    end
  else
    pdf = Path[pdf_loc]
    name = pdf.dirs.drop(3)
    name << '/'
    name << pdf.filename
    pdf_url = make_url(name.join)
  end
  review_file = Path[review_loc / name.split('/').last].with(ext: 'org')
  create_review(pdf_url, review_file)
end
